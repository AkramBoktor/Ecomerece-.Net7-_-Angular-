Section 2
 
* Creating the web API Project 
. To make new folder 
 - makdir ....
. To know the .Net Version you can click in command line
 - dotnet --info
. To know the command line for all .Net
 - dotnet -h
. To Create .Net Project by command line
- dotnet new sln -> create solution then click ls
- dotnet new webapi -n (API -> for name) 
- C:\Users\FGhd76\Desktop\Ecomerece(.Net&Angular)\Ecommerce>dotnet sln add API
Project `API\API.csproj` added to the solution.
- dotnet sln list known all list of the solutions in folder
. To run project and see the change dynamic as Angular
 - dotnet watch
 - Run project with ordinary way is dotnet run 
. To Make migration you should install dotnet ef--
- the command : dotnet tool install --global dotnet-ef --version 7.0.0
- dotnet ef migrations add 
 dotnet ef migrations add IntialCreate -o Data/Migrations
After that you need to run : dotnet ef database  update

. To Create class library project
- dotnet new classlib -n Infrastructure
. Add it to your solution
- dotnet sln add Core -> Infrastructure
. To add new Reference of your solution will be 
 - dotnet add reference ../Infrastructure

-----------------------------------------------------------------------------

Section 3

The repository pattern :
1- Decouple business code from data access
2- Separation of concerns
3- Minimise duplicate query logic
4- Testability
5- Increase level of abstraction
6- Increased Maitainability , Flexiblity , Testability

. Drop database migrations
- dotnet ef database drop -p Infrastructure -s API
. To Delete the folder
- dotnet ef migrations remove -p Infrastructure -s API

. To Create new Migration you should do
- dotnet ef migrations add InitialCreate -p Infrastructure -s API -o Data/Migrations -> Infrastructure refer to the project API -> refer to the start up project

. Addidng seed data in your solutions

 public class StoreContextSeed
    {
        public static async Task SeedAsync(StoreContext context)
        {
            //check if have seed data or not if not add some
            if (!context.ProductBrands.Any())
            {
                var brandsData = File.ReadAllText("../Infrastructure/SeedData/brands.json");
                var brands = JsonSerializer.Deserialize<List<ProductBrand>>(brandsData);
                context.ProductBrands.AddRange(brands);
            }

            if (!context.ProductTypes.Any())
            {
                var typesData = File.ReadAllText("../Infrastructure/SeedData/types.json");
                var types = JsonSerializer.Deserialize<List<ProductType>>(typesData);
                context.ProductTypes.AddRange(types);
            }

            if (!context.Products.Any())
            {
                var ProductsData = File.ReadAllText("../Infrastructure/SeedData/products.json");
                var products = JsonSerializer.Deserialize<List<Products>>(ProductsData);
                context.Products.AddRange(products);
            }
        }
    }

-------------------------------------------------------------------
Section 4
. Generic Repository
  public interface IGenericRepository<T> where T : BaseEntity 
    {
        Task<T> GetByIdAsync(int id);
        Task<IReadOnlyList<T>> LIstAllAsync();

    }

. Specific Pattern to rescue
 - Describe a query in an object
 - Returns an IQuerable<T>
 - Generic List Method takes a specification as parameter

. Make an interface for specification 
  public interface ISpecification<T>
    {
       Expression<Func<T,bool>> Criteria {get;} 
       
       List<Expression<Func<T, object>>> Include{get;}   
    }
. Implement this interface
    public class BaseSpecification<T> : ISpecification<T>
    {
        public BaseSpecification(Expression<Func<T, bool>> criteria)
        {
            Criteria = criteria;
        }

        public Expression<Func<T, bool>> Criteria { get; }

        public List<Expression<Func<T, object>>> Includes { get; } = 
               new List<Expression<Func<T, object>>>();

        protected void AddInclude(Expression<Func<T, object>> includeExpression)
        {
            Includes.Add(includeExpression);
        }
    }

. Make specification
    public class SpecificationEvaluator<TEntity> where TEntity : BaseEntity
    {
        public static IQueryable<TEntity> GetQuery(IQueryable<TEntity> inputQuery , ISpecification<TEntity> spec)
        {
            var query = inputQuery;
            if(spec.Criteria != null)
            {
                query = query.Where(spec.Criteria);
            }
            query = spec.Includes.Aggregate(query, (current , include) => current.Include(include)); ;

            return query;
        }
    }

. DTO ( Data Transfer Object it's used for transfer data between layers ) 
- For view data for the client with a good shap

. AutoMapper Add 
  - install auto mapeer extension.dependency injection
- Create3 new class 
   public class MappingProfile : Profile
    {
        public MappingProfile()
        {
            CreateMap<Products, ProductToReturnDto>();
        }
    }

  - Add automapper in program.cs
builder.Services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());

 - Inject AutoMapper to the controller 
Using auto mapper 
            return Ok(_mapper.Map<Products, ProductToReturnDto>(product));
 - For mapping an object you need to custom it on mapping profile
      public MappingProfile()
        {
            CreateMap<Products, ProductToReturnDto>()
                .ForMember(d => d.ProductBrand, o => o.MapFrom(s => s.ProductBrand.Name))
                .ForMember(d => d.ProductType, o => o.MapFrom(s => s.ProductType.Name));
        }
 
----------------------------------------------------------------------

Section 5 API Error Handling
 . 200 ok   300 range redirection  400 range error handling  500 range error handling 
 - Create Class ApiResponse
   public class ApiResponse
    {
        public int StatusCode { get; set; }
        public string Message { get; set; }
    }

. Improve swagger document in the product controller 
will provide two response type in swagger

        [HttpGet("{id}")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public async Task<ActionResult<ProductToReturnDto>> GetProduct(int id)
        {
            var spec = new ProductsWithTypesAndBrandsSpecification(id);

            var product = (await _productRepo.GetEntityWithSpec(spec));

           if(product == null) return NotFound(new ApiResponse(404));

            return Ok(_mapper.Map<Products, ProductToReturnDto>(product));
        }

-------------------------------------------------------

Section 5 ( Pagination - filter - Sorting - Searching ) 
. Pagination : 
-   will be like query string : /api/products?pageNumber=2&pageSize=5
-   page size should be limited 
-   We should always oage results



----------------------------------------------------------------

Section 7 Front end 
To install certificate in your computer to make the client like https 
. mkcert -install
to  install certificated 
1 - open the path and press Alt , Shift , F , A
and then run as adminstration
2 - mkcert -install
3 - mkcert localhost
important Link : https://technixleo.com/create-locally-trusted-ssl-certificates-with-mkcert-on-windows/

add these lines to ts config

      "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "options":{
            "sslCert":"ssl/localhost.pem",
            "sslKey":"ssl/localhost-key.pem",
            "ssl":true
          },

. To add boostrap 
1 - in the client folder of your project write this command 
 ng add ngx-bootstrap
https://valor-software.com/ngx-bootstrap/#/documentation

For unistall angular CLi

**npm uninstall -g @angular/cli
**npm cache clean --force
**npm install -g @angular/cli@1.4.1
**npx -p @angular/cli@15.0.2 ng new Client


-------------------------------------------------------------

Section 8 Angular basics
. To Generate Component you should run 
 - ng g c nav-bar --dry-run
. To skip test file
 - ng g c nav-bar --skip-tests

. Angular life cycle hooks
 - oninit
 -
  ngOnInit(): void {
     this.http.get('https://localhost:5001/api/products').subscribe({
       next: (response:any)=> this.products = response.data, //what to do next
       error: (error:any) => console.log(error), // what to do when ther is an error
       complete:()=>{
         console.log('requested Completed');
       }
     });
  }

Structure Directive 
 <li class="list-unstyled" *ngfor="let product of products">
       {{product.name}}
    </li>

Observable : A sequence of items that arrive asynchronously over time
- important link json2ts https://json2ts.vercel.app/

-------------------------------------------------------------------
Section 9
. To create new module
  - ng g m core 
. For skip testing file
  - ng g c shop/shop --flat --skip-tests --dry-run
. For create a service 
  - ng g s shop/shop --skip-tests

-----------------------------------------------------------------
Section 10
 . To send data from the parent to child i will use @Input in the child using from parent to child
 - in the child will make @Input() product: IProduct;
 - In parent use                         <app-product-item [product]="product"></app-product-item>

 . Angular Pipe we can use 
 - Currency



 . Using Output using from child to parent 
**in child 
 @Input() totalCount?:number
  @Input() pageSize?:number
  @Output() pageChanged = new EventEmitter();

  onPageChanged(event:any){
    this.pageChanged.emit(event.page);
  }

**in parent
  <app-pager
                 [totalCount]="totalCount"
                 [pageSize] = "shopParams.pageSize"
                 (pageChanged) = "onPageChange($event)"
                 >

                 </app-pager>

** parent.ts
  onPageChange(event:any){
    if(this.shopParams.pageNumber !== event)
    {
      this.shopParams.pageNumber = event;
    }
    this.getProducts();
  }

-------------------------------------------------------------
Section 10 Routing
 - in app-routing.module
 .* add 
const routes: Routes = [
  { path:'', component:HomeComponent},
  { path:'/shop', component:ShopComponent},
  { path:'/shop:id', component:ProductDetailsComponent},
  { path:'**', redirectTo:'', pathMatch:'full'},
];


- to add router link when click link make it as router
  <a class="p-2" routerLine='/'  
        routerLinkActive="active"
        routerLinkeActiveOptions = "{exact:true}"
        >Home
      </a>
        <a class="p-2" routerLink='/shop'  
        routerLinkActive="active"
        >
        Shop
      </a>
        <a class="p-2" routerLine='/contact'
         routerLinkActive="active">
         Contact
        </a>

And should add RouterModule in the module of the using 
 imports: [
    CommonModule,
    RouterModule
  ],

- send parameter id in url & read it
  constructor(private shopService:ShopService , private route: ActivatedRoute)
  loadProduct(){
*** let id =  this.route.snapshot.paramMap.get('id');
if(id!=null) this.shopService.getProductDetails(+id).subscribe({
  next: response => this.product = response, //what to do next
error: (error:any) => console.log(error), // what to do when ther is an error
complete:()=>{ 
console.log('requested Completed');
}
})
}

- lazyloading
* in the child router module
const routes:any =[
  { path:'', component:ShopComponent},
  { path:':id', component:ProductDetailsComponent},
]

@NgModule({
  declarations: [],
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})

* in the parent module
const routes: Routes = [
  { path:'', component:HomeComponent},
  { path:'shop', loadChildren:()=>import('./shop/shop.module').then(m=>m.ShopModule)},
  { path:'**', redirectTo:'', pathMatch:'full'},
];

---------------------------------------------------------------------------------
Section 11 Client-Error Handling 

- Error handling 
- Http interceptor : allow us catch error just come back from the server
- adding toast notification
- troubleshooting tips

- create interceptor component
 . ng g interceptor --skip-tests

- in app.module.ts or core.module.ts
 . add interceptor in provideers
  providers: [
    {provide:HTTP_INTERCEPTORS,useClass:ErrorInterceptor,multi:true}
  ],

- add toast notification 
https://github.com/scttcper/ngx-toastr
https://www.npmjs.com/package/ngx-toastr/v/15.0.0
https://www.npmjs.com/search?q=ngx-toastr
In angular make this command : npm i ngx-toastr@15.0.0

. in core.module.ts
- import { ToastrModule } from 'ngx-toastr';
-  ToastrModule.forRoot({
      timeOut: 10000,
      positionClass: 'toast-top-right',
      preventDuplicates: true,
    }),

- to solve this error in configuration 
** Property 'get' in type 'ToastInjector' is not assignable to the same property in base type 'Injector
- in tsconfog.json
- in angularCompilerOptions
- Make -> skipLibCheck : true
. 
----------------------------------------------------------------------------------
 . Section 12 Client : Pazzazz
- add breadcrumb website: https://udayvunnam.github.io/xng-breadcrumb/#/quickstart
1- npm install --save xng-breadcrumb@9.0.0
2- in app.moduel
import {BreadcrumbModule} from 'xng-breadcrumb';

@NgModule({
  ...
  imports: [BreadcrumbModule],
  ...
})
export class AppModule { }

3 - add this 
    <xng-breadcrumb></xng-breadcrumb>

- for change the bootstrap theme , you can use bootwatch
1- npm i bootswatch
2 - add bootswatch in angular.json
  "styles": [
              "node_modules/ngx-bootstrap/datepicker/bs-datepicker.css",
              "node_modules/bootswatch/dist/superhero/bootstrap.min.css",
              "node_modules/ngx-toastr/toastr.css",
              "src/styles.scss"
            ],


- Add Spinner ( https://www.npmjs.com/package/ngx-spinner )
1- npm install ngx-spinner --save
2 - Demo (https://napster2210.github.io/ngx-spinner/)
3 - Make service 
4 - add interceptor in it
  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {
    this.buseyService.start();
    return next.handle(request).pipe(
      delay(1000),
      finalize(()=> this.buseyService.end())
    );
  }
-----------------------------------------------------------------------------------
Section 13 Basket using redis in memory database
1 - Nuget Gallery -> then install redis in infrastructure (StackExchange.Redis)
2 - Add Redis in startup 
// Add redis in start up
            services.AddSingleton<IConnectionMultiplexer>(c => {
                var options = ConfigurationOptions.Parse(config.GetConnectionString("Redis"));
                return ConnectionMultiplexer.Connect(options);
            });
3 - in appsetting add string connection of redis 
 "ConnectionStrings": {
    "DefaultConnection": "Data Source = Ecommerce.db",
    "Redis": "localhost"
  },